[0m[[0m[0mdebug[0m] [0m[0mThe org.weather.model.data.FileOperations$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(outPath,[Default]), UsedName(writeForecasts,[Default]), UsedName(getMappingData,[Default]), UsedName(getLatLong,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) org.weather.model.data.FileOperations$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) org.weather.model.data.FileOperations$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of org.weather.model.data.TestGetDataAndFileOperations: Set(UsedName(getMappingData,[Default]), UsedName(getLatLong,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of org.weather.model.forecast.TestPredictFunctions. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe org.weather.model.data.GetData$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getMappingData,[Default]), UsedName(notify,[Default]), UsedName(fileDownloader,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getMaxMinDate,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(GetData,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(getLatLong,[Default]), UsedName(getClass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) org.weather.model.data.GetData$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) org.weather.model.data.GetData$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of org.weather.model.data.TestGetDataAndFileOperations: Set(UsedName(getMappingData,[Default]), UsedName(GetData,[Default]), UsedName(getLatLong,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe org.weather.model.data.CommonData$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(defaultDateRange,[Default]), UsedName(bomBaseUrl,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) org.weather.model.data.CommonData$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) org.weather.model.data.CommonData$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of org.weather.model.data.TestGetDataAndFileOperations. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of org.weather.model.forecast.TestPredictFunctions. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(C:\Users\paolo.santilli2\Desktop\Unibo\Scalable and Cloud Programming\weather_forecast\src\test\scala\org\weather\model\forecast\TestPredictFunctions.scala, C:\Users\paolo.santilli2\Desktop\Unibo\Scalable and Cloud Programming\weather_forecast\src\test\scala\org\weather\model\data\DataTests.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(org.weather.model.data.FileOperations$,ModifiedNames(changes = UsedName(outPath,[Default]), UsedName(writeForecasts,[Default]), UsedName(getMappingData,[Default]), UsedName(getLatLong,[Default]))), NamesChange(org.weather.model.data.GetData$,ModifiedNames(changes = UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getMappingData,[Default]), UsedName(notify,[Default]), UsedName(fileDownloader,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getMaxMinDate,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(GetData,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(getLatLong,[Default]), UsedName(getClass,[Default]))), NamesChange(org.weather.model.data.CommonData$,ModifiedNames(changes = UsedName(defaultDateRange,[Default]), UsedName(bomBaseUrl,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(org.weather.model.forecast.TestPredictFunctions, org.weather.model.data.TestGetDataAndFileOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(org.weather.model.data.TestGetDataAndFileOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll sources are invalidated.[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 0 sources: invalidated sources (2) exceeded 50.0% of all sources[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.weather.model.forecast.TestPredictFunctions...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.weather.model.forecast.TestPredictFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.weather.model.forecast.TestPredictFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.weather.model.forecast.TestPredictFunctions,ModifiedNames(changes = UsedName(nestedSuites,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(suiteId,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(fail,[Default]), UsedName($init$,[Default]), UsedName(assertionsHelper,[Default]), UsedName(synchronized,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(assertResult,[Default]), UsedName(clone,[Default]), UsedName(rerunner,[Default]), UsedName($asInstanceOf,[Default]), UsedName(testsFor,[Default]), UsedName(expectResult,[Default]), UsedName(LegacyEqualizer,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(org;weather;model;forecast;TestPredictFunctions;init;,[Default]), UsedName(assume,[Default]), UsedName(eq,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(asInstanceOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(LegacyCheckingEqualizer,[Default]), UsedName(execute$default$7,[Default]), UsedName(intercept,[Default]), UsedName(execute$default$5,[Default]), UsedName(tags,[Default]), UsedName(ignore,[Default]), UsedName(notify,[Default]), UsedName(runTests,[Default]), UsedName(runTest,[Default]), UsedName(info,[Default]), UsedName($isInstanceOf,[Default]), UsedName(styleName,[Default]), UsedName(cancel,[Default]), UsedName(test,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(runNestedSuites,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(execute$default$3,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(withFixture,[Default]), UsedName(hashCode,[Default]), UsedName(markup,[Default]), UsedName(Equalizer,[Default]), UsedName(assertTypeError,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(testNames,[Default]), UsedName(assertCompiles,[Default]), UsedName(NoArgTest,[Default]), UsedName(!==,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(convertToLegacyEqualizer,[Default]), UsedName(execute$default$6,[Default]), UsedName(pending,[Default]), UsedName(execute,[Default]), UsedName(wait,[Default]), UsedName(createCatchReporter,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(execute$default$4,[Default]), UsedName(registerTest,[Default]), UsedName(execute$default$2,[Default]), UsedName(##,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(testDataFor,[Default]), UsedName(finalize,[Default]), UsedName(trap,[Default]), UsedName(toString,[Default]), UsedName(suiteName,[Default]), UsedName(note,[Default]), UsedName(===,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(execute$default$1,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(run,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(expect,[Default]), UsedName(expectedTestCount,[Default]), UsedName(convertToLegacyCheckingEqualizer,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(TestPredictFunctions,[Default]), UsedName(alert,[Default]), UsedName(getClass,[Default]), UsedName(assert,[Default]))) invalidates 1 classes due to The org.weather.model.forecast.TestPredictFunctions has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToEqualizer,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.weather.model.forecast.TestPredictFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.weather.model.data.TestGetDataAndFileOperations...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.weather.model.data.TestGetDataAndFileOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.weather.model.data.TestGetDataAndFileOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.weather.model.data.TestGetDataAndFileOperations,ModifiedNames(changes = UsedName(nestedSuites,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(suiteId,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(fail,[Default]), UsedName($init$,[Default]), UsedName(assertionsHelper,[Default]), UsedName(synchronized,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(assertResult,[Default]), UsedName(clone,[Default]), UsedName(rerunner,[Default]), UsedName($asInstanceOf,[Default]), UsedName(testsFor,[Default]), UsedName(expectResult,[Default]), UsedName(LegacyEqualizer,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(assume,[Default]), UsedName(eq,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(asInstanceOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(LegacyCheckingEqualizer,[Default]), UsedName(execute$default$7,[Default]), UsedName(intercept,[Default]), UsedName(execute$default$5,[Default]), UsedName(tags,[Default]), UsedName(ignore,[Default]), UsedName(notify,[Default]), UsedName(runTests,[Default]), UsedName(runTest,[Default]), UsedName(info,[Default]), UsedName($isInstanceOf,[Default]), UsedName(styleName,[Default]), UsedName(cancel,[Default]), UsedName(test,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(runNestedSuites,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(execute$default$3,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(withFixture,[Default]), UsedName(hashCode,[Default]), UsedName(markup,[Default]), UsedName(Equalizer,[Default]), UsedName(assertTypeError,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(testNames,[Default]), UsedName(assertCompiles,[Default]), UsedName(NoArgTest,[Default]), UsedName(!==,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(convertToLegacyEqualizer,[Default]), UsedName(execute$default$6,[Default]), UsedName(pending,[Default]), UsedName(execute,[Default]), UsedName(wait,[Default]), UsedName(createCatchReporter,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(execute$default$4,[Default]), UsedName(registerTest,[Default]), UsedName(execute$default$2,[Default]), UsedName(##,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(testDataFor,[Default]), UsedName(finalize,[Default]), UsedName(trap,[Default]), UsedName(toString,[Default]), UsedName(suiteName,[Default]), UsedName(note,[Default]), UsedName(===,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(execute$default$1,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(run,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(!=,[Default]), UsedName(==,[Default]), UsedName(expect,[Default]), UsedName(expectedTestCount,[Default]), UsedName(convertToLegacyCheckingEqualizer,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(TestGetDataAndFileOperations,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(org;weather;model;data;TestGetDataAndFileOperations;init;,[Default]), UsedName(alert,[Default]), UsedName(getClass,[Default]), UsedName(assert,[Default]))) invalidates 1 classes due to The org.weather.model.data.TestGetDataAndFileOperations has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToEqualizer,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.weather.model.data.TestGetDataAndFileOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
